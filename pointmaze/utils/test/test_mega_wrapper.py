import unittest
import numpy as np
from pathlib import Path
import sys
from functools import partial
import gymnasium as gym
from collections import namedtuple

PROJECT_ROOT_DIR = Path(__file__).parent.parent.parent
if str(PROJECT_ROOT_DIR.absolute()) not in sys.path:
    sys.path.append(str(PROJECT_ROOT_DIR.absolute()))

from utils.mega_wrapper import MEGAWrapper


class MEGAWrapperTest(unittest.TestCase):

    def setUp(self) -> None:
        super().setUp()

        tmp_env = gym.make("PointMaze_Large_Diverse_G-v3")
        self.env = MEGAWrapper(tmp_env, sample_N=5)

        self.achievable_goals = np.array([
            [ 1.4109347 , -0.95284998],
            [-3.6364212 ,  1.06159357],
            [-4.52483032, -0.85183786],
            [-4.28642272, -0.02981142],
            [-2.43989327,  3.24754825],
            [ 2.60557144,  2.21602984],
            [ 3.73396309, -3.24264685],
            [-1.63381354,  2.15094029],
            [ 0.47137641,  1.21550866],
            [ 2.71455211,  2.78304125],
            [ 0.46514937, -0.76696896],
            [ 0.52704525, -1.84514461],
            [-3.72846656,  3.16135314],
            [ 2.72190071, -3.18659145],
            [-4.61508161,  3.1815601 ],
            [ 0.74745867, -1.09202823],
            [ 2.5839447 ,  2.22920682],
            [ 2.44777864, -1.79487212],
            [-3.74679556,  3.1363246 ],
            [ 3.34375386, -2.91373668],
            [-4.55596663,  0.78144775],
            [-4.31323868,  0.98615017],
            [ 0.3137015 , -3.21321855],
            [-1.50171415,  2.83177171],
            [ 1.48017766, -0.99626507],
            [ 0.34861747, -1.84593162],
            [ 4.73150957,  1.15045852],
            [ 4.57756053,  1.20684538],
            [-1.58722719,  3.24701339],
            [ 3.41114336, -0.85168041],
            [ 0.30630683,  0.9534739 ],
            [ 4.31946584,  2.10189288],
            [-2.53794676,  3.23984435],
            [-4.29308117, -0.01192646],
            [-0.36617387, -2.96465761],
            [ 0.48808348, -3.0357302 ],
            [ 0.27010911, -0.89425659],
            [-4.37347501,  0.96961447],
            [-4.6099588 ,  0.84530878],
            [-4.30058812,  0.79300622],
            [-4.41260068, -1.06858902],
            [-2.49391317,  0.7620066 ],
            [ 4.52841775,  2.8612267 ],
            [ 2.60837534,  3.07302251],
            [-1.4550197 ,  3.09810755],
            [ 3.70055405,  2.92087133],
            [ 4.48829421,  1.87807501],
            [ 4.34555514,  3.23776649],
            [ 4.42637171,  2.00991654],
            [-4.27748768,  0.83128486],
            [ 3.59563574, -0.79351295],
            [ 4.29334066, -0.03707188],
            [-3.70261166,  0.75244971],
            [-4.33465287, -3.16344318],
            [ 4.63877206, -3.16496075],
            [-3.3697567 ,  2.80491394],
            [-2.40300773,  1.04273979],
            [ 0.48797244, -0.1208628 ],
            [ 3.58889939,  2.93441076],
            [-4.55616289, -1.16760867],
            [-1.65088798, -2.93185817],
            [ 2.5255225 , -2.15409143],
            [-1.55083222,  2.89703818],
            [ 0.44364746, -0.93804861],
            [-3.47712556, -0.94382913],
            [-4.27914692, -3.11906799],
            [-4.26418437,  3.19884922],
            [ 3.66635892, -2.92382552],
            [ 0.63677811,  2.00046898],
            [ 4.32150104,  2.75686893],
            [ 0.41207319,  1.10862047],
            [ 4.66531572,  0.87977445]
        ])
        self.env.sync_evaluation_stat(self.achievable_goals.tolist())
    
    def test_1(self):
        for i in range(100):
            sampled_goal = self.env.sample_goal()
            print(sampled_goal, np.exp(self.env.kde.score_samples([sampled_goal])), f"kde threshold: {self.env.kde_score_threshold}")
    
        

if __name__ == "__main__":
    unittest.main()